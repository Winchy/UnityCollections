// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define thread_group_size_x 10
#define thread_group_size_y 10
#define thread_group_size_z 10

float3 group_size = float3(5, 5, 5);

struct positionStruct 
{
	float3 pos;
	int renderface[6];
};

struct blockStruct 
{
	int On;
};

RWStructuredBuffer<positionStruct> outputBuffer;
StructuredBuffer<blockStruct> mapBuffer;

int CalculateIndex(uint3 id) {
	int idx = id.x + (id.y * thread_group_size_x * group_size.x) + (id.z * thread_group_size_x * group_size.x * thread_group_size_y * group_size.y);
	return idx;
}

[numthreads(thread_group_size_x, thread_group_size_y, thread_group_size_z)]
void CSMain (uint3 grpID : SV_GroupID, uint3 id : SV_DispatchThreadID, uint3 grpTID : SV_GroupThreadID, uint grpIdx : SV_GroupIndex)
{
	int idx = CalculateIndex(id);

	float scale = 1;

	float3 pos = id;//(id + grpTID + grpTID * float3(thread_group_size_x, thread_group_size_y, thread_group_size_z));
	outputBuffer[idx].pos = pos * scale;

	int maxX = thread_group_size_x * group_size.x;
	int maxY = thread_group_size_y * group_size.y;
	int maxZ = thread_group_size_z * group_size.z;
	int maxidx = maxX * maxY * maxZ;


	int faces[6];

	for (int i = 0; i < 6; i++) {
		faces[i] = 0;
	}

	if (mapBuffer[idx].On == 1) {
		//Neigbour check
		int top = CalculateIndex(id + float3(0, 1, 0));
		int bottom = CalculateIndex(id + float3(0, -1, 0));
		int left = CalculateIndex(id + float3(-1, 0, 0));
		int right = CalculateIndex(id + float3(1, 0, 0));
		int front = CalculateIndex(id + float3(0, 0, -1));
		int back = CalculateIndex(id + float3(0, 0, 1));

		if (front >= 0 && front < maxidx && mapBuffer[front].On == 0)
			faces[0] = 1;

		else if (id.z == 0)
			faces[0] = 1;

		if (left >= 0 && left < maxidx && mapBuffer[left].On == 0) 
			faces[1] = 1;

		else if (id.x == 0)
			faces[1] = 1;

		if (right >= 0 && right < maxidx && mapBuffer[right].On == 0)
			faces[2] = 1;

		else if (id.x >= maxX - 1)
			faces[2] = 1;

		if (back >= 0 && back < maxidx && mapBuffer[back].On == 0) 
			faces[3] = 1;

		else if (id.z >= maxZ - 1)
			faces[3] = 1;

		if (top >= 0 && top < maxidx && mapBuffer[top].On == 0) 
			faces[4] = 1;

		else if (id.y >= maxY - 1)
			faces[4] = 1;

		if (bottom >= 0 && bottom < maxidx && mapBuffer[bottom].On == 0)
			faces[5] = 1;

		else if (id.y == 0)
			faces[5] = 1;
			
	}
	//faces[5] = 1;
	outputBuffer[idx].renderface = faces;
}
